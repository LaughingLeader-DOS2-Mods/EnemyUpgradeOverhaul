Version 1
SubGoalCombiner SGC_AND
INITSECTION
KBSECTION

//REGION REGISTERING
PROC
LLENEMY_Upgrades_AddGroup((STRING)_Group, (STRING)_GlobalDisableFlag, (STRING)_RolledForFlag, (STRING)_GroupSuccessFlag)
THEN
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_AddType((STRING)_Group, (STRING)_Type, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
THEN
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Range, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _,_)
THEN
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, 1, 1);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt)
AND
IntegerSum(_StartInt, _Range, _EndInt)
AND
IntegerSum(_EndInt, 1, _NextStartInt)
AND
IntegerMin(_EndInt, 999, _CappedEnd)
THEN
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt);
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _NextStartInt, _CappedEnd);
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints);

/*
IF
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _EndInt, _Duration, _ChallengePoints)
AND
IntegertoString(_StartInt, _StartStr)
AND
IntegertoString(_EndInt, _EndStr)
THEN
LeaderLog_Log("TRACE", "[LLENEMY_00_UpgradesMain:DB_LLENEMY_Upgrades_Statuses] Added (",_Group,":",_Type,":",_Status,") Start(",_StartStr,") End(",_EndStr,").");
*/

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatusToRange(_Group, _Type, _Status, _MinRoll, _MaxRoll, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
THEN
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _ChallengePoints);

//Hopefully this should never actually be needed, as it could create gaps of "nothing" if the LastInt is upped without anything between the two values
PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt)
AND
_MaxRoll > _LastInt
THEN
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt);
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _MaxRoll);
//END_REGION

//REGION MOD_REGISTERING
PROC
LLENEMY_Upgrades_Internal_RegisterModUpgrades_Start((STRING)_Group, (STRING)_Type)
THEN
LLENEMY_Upgrades_Register_ModUpgrades(_Group, _Type);
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades(_Group, _Type);

//This is called manually by EUO when mods should register upgrades for a specific group/type
PROC
LLENEMY_Upgrades_Register_ModUpgrades((STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_ModApi_ModUpgrades((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Chance, (INTEGER)_ChallengePoints)
THEN
NOT DB_LLENEMY_ModApi_ModUpgrades(_Group, _Type, _Status, _Chance, _ChallengePoints);
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Chance, _ChallengePoints);

PROC
LLENEMY_Upgrades_Internal_RegisterDatabaseModUpgrades((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_ModApi_ModUpgrades((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Chance, (INTEGER)_ChallengePoints, (REAL)_Duration)
THEN
NOT DB_LLENEMY_ModApi_ModUpgrades(_Group, _Type, _Status, _Chance, _ChallengePoints, _Duration);
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Chance, _ChallengePoints, _Duration);
//END_REGION

//REGION CLEAR
PROC
LLENEMY_Upgrades_Clear_Group((STRING)_Group)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
NOT DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_Clear_Group((STRING)_Group)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints)
THEN
NOT DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints);
LLENEMY_Upgrades_Clear_UpgradesForType(_Group, _Type);

PROC
LLENEMY_Upgrades_Clear_UpgradesForType((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints)
THEN
NOT DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _CappedEnd, _Duration, _ChallengePoints);

PROC
LLENEMY_Upgrades_Clear_UpgradesForType((STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _NextStartInt, _CappedEnd)
THEN
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _NextStartInt, _CappedEnd);
//END_REGION

//REGION RESET_DATA
PROC
LLENEMY_Upgrades_ResetUpgradeData()
THEN
SysClear("DB_LLENEMY_Upgrades_Groups", 4);
SysClear("DB_LLENEMY_Upgrades_Types", 5);
SysClear("DB_LLENEMY_Upgrades_Statuses", 7);
SysClear("DB_LLENEMY_Upgrades_LastTypeValues", 4);
SysClear("DB_LLENEMY_LastGrenadeInt", 2);
SysClear("DB_LLENEMY_GrenadeSkills", 3);

GlobalClearFlag("LLENEMY_TalentUpgrades_DivineTalentsAdded");
//END_REGION

//REGION UPDATES
PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1,5,0,0)
THEN
LLENEMY_Upgrades_ResetUpgradeData();

PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1,2,1,0)
THEN
GlobalSetFlag("LLENEMY_DuplicationUpgradesDisabled");

PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1, 1, 2, 0)
THEN
LLENEMY_Debug_RemoveStackedWeaponAuras("VENOM_AURA", "FIRE_BRAND_AURA");

PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1, 1, 1, 2)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:UpgradesMain:LeaderUpdater_ModUpdated] Updating upgrade settings from version [",_OldVersion,"].");
LLENEMY_Debug_RemovePermanentStatus("EVASION_AURA");
LLENEMY_Debug_RemovePermanentStatus("EVASION");

PROC
LLENEMY_Debug_RemovePermanentStatus((STRING)_Status)
AND
DB_CombatCharacters(_Enemy, _)
AND
LeaderLib_Helper_QRY_HasPermanentStatus(_Enemy, _Status)
THEN
RemoveStatus(_Enemy, _Status);

//Two bonus weapon aura statuses apparently cause lag?
PROC
LLENEMY_Debug_RemoveStackedWeaponAuras((STRING)_Status, (STRING)_Status2)
AND
DB_CombatCharacters(_Enemy, _CombatID)
AND
NOT DB_IsPlayer(_Enemy)
AND
HasActiveStatus(_Enemy, _Status, 1)
AND
DB_CombatCharacters(_OtherEnemy, _CombatID)
AND
NOT DB_IsPlayer(_OtherEnemy)
AND
HasActiveStatus(_OtherEnemy, _Status2, 1)
THEN
RemoveStatus(_Enemy, _Status);
//RemoveStatus(_OtherEnemy, _Status2);
//END_REGION

//REGION APPLYING
PROC
LLENEMY_Upgrades_ClearFlags((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
ObjectGetFlag(_Character, _RolledForFlag, 1)
THEN
ObjectClearFlag(_Character, _RolledForFlag);

PROC
LLENEMY_Upgrades_RollForUpgrades((CHARACTERGUID)_Character)
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
CharacterGetDisplayName(_Character, _, _Name)
AND
IntegertoString(_Roll, _RollStr)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("TRACE", "[LLENEMY_00_UpgradesMain:RollForUpgrades] (",_Name,") rolled (", _RollStr, ") for types.");
LLENEMY_Upgrades_Internal_OnRoll(_Character, _Roll);

PROC
LLENEMY_Upgrades_Internal_OnRoll((CHARACTERGUID)_Character, (INTEGER)_Roll)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
NOT DB_GlobalFlag(_GlobalDisableFlag)
AND
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag(_Character, _RolledForFlag)
THEN
LLENEMY_Upgrades_OnRollForGroup(_Character, _Roll, _Group);

PROC
LLENEMY_Upgrades_Internal_OnRoll((CHARACTERGUID)_Character, (INTEGER)_Roll)
AND
_Roll == 0
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollForGroup] Rolled a 0! Critical failure!");
LLENEMY_Upgrades_OnCriticalFailure(_Character);

PROC
LLENEMY_Upgrades_OnCriticalFailure((CHARACTERGUID)_Character)
THEN
DB_NOOP(1);

QRY
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag((CHARACTERGUID)_Character, (STRING)_Flag)
AND
_Flag == ""
THEN
DB_NOOP(1);

QRY
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag((CHARACTERGUID)_Character, (STRING)_Flag)
AND
_Flag != ""
AND
ObjectGetFlag(_Character, _Flag, 0)
THEN
ObjectSetFlag(_Character, _Flag);

PROC
LLENEMY_Upgrades_ResetRolledFlags((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisabledFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
ObjectClearFlag(_Character, _RolledForFlag);

//Intercept and add to DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type) to block a specific group from applying regularly
PROC
LLENEMY_Upgrades_CanRollForGroupUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_OnRollForGroup((CHARACTERGUID)_Character, (INTEGER)_Roll, (STRING)_Group)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _CP)
//AND
//LLENEMY_Upgrades_QRY_Internal_LogGroupRoll(_Character, _Roll, _MinRoll, _MaxRoll, _Group, _Type)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
THEN
LLENEMY_Upgrades_CanRollForGroupUpgrade(_Character, _Group, _Type);
LLENEMY_Upgrades_RollForStatusUpgrade(_Character, _Group, _Type);
LLENEMY_Upgrades_CleanupBlockedUpgrades(_Character, _Group, _Type);

QRY
LLENEMY_Upgrades_QRY_Internal_LogGroupRoll((CHARACTERGUID)_Character, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type)
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Upgrades:LogGroupRoll] [",_Name,"] Roll [", _RollStr, "] Group [",_Group,"] Type [",_Type,"] Min[",_MinStr,"] Max[",_MaxStr,"]");

QRY
LLENEMY_Upgrades_QRY_CanRollForStatusUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status)
THEN
LLENEMY_Upgrades_CanRollForStatusUpgrade(_Character, _Group, _Type, _Status);

PROC
LLENEMY_Upgrades_CanRollForStatusUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status)
THEN
//DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type, _Status)
DB_NOOP(1);

PROC
LLENEMY_Upgrades_RollForStatusUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type)
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
AND
LLENEMY_Upgrades_QRY_CanRollForStatusUpgrade(_Character, _Group, _Type, _Status)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type, _Status)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:RollForStatusUpgrade] Roll successful for [",_Group,":",_Type,"] Status [",_Status,"]. Applying.");
LLENEMY_Upgrades_ApplyUpgrade(_Character, _Group, _Type, _Status, _Duration, _CP);
LLENEMY_Upgrades_OnRollForGroupSucceeded(_Character, _Group, _Type);

QRY
LLENEMY_Upgrades_QRY_Internal_LogTypeRoll((CHARACTERGUID)_Character, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type)
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Upgrades:LogTypeRoll] [",_Name,"] Roll [", _RollStr, "] Group [",_Group,"] Type [",_Type,"] Min[",_MinStr,"] Max[",_MaxStr,"]");

QRY
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
THEN
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll);

PROC
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
AND
_Roll == 0
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:CheckForTypeCriticalFailure] [",_Name,"] Rolled a 0 for Group [",_Group,"] and Type [",_Type,"]! Critical failure!");
LLENEMY_Upgrades_OnTypeCriticalFailure(_Character, _Group, _Type);

PROC
LLENEMY_Upgrades_OnTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_OnRollForGroupSucceeded((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
_GroupSuccessFlag != ""
THEN
ObjectSetFlag(_Character, _GroupSuccessFlag, 0);

PROC
LLENEMY_Upgrades_CleanupBlockedUpgrades((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type);

PROC
LLENEMY_Upgrades_CleanupBlockedUpgrades((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type, _Status)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type, _Status);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
NOT GetVarInteger(_Character, "LLENEMY_ChallengePoints", _)
THEN
SetVarInteger(_Character, "LLENEMY_ChallengePoints", 0);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
GetVarInteger(_Character, "LLENEMY_ChallengePoints", _TotalPoints)
AND
IntegerSum(_CP, _TotalPoints, _NextTotal)
THEN
SetVarInteger(_Character, "LLENEMY_ChallengePoints", _NextTotal);
ApplyStatus(_Character, _Status, _Duration, 0, _Character);

/*
PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
GetVarInteger(_Character, "LLENEMY_ChallengePoints", _TotalPoints)
AND
_TotalPoints >= 15
AND
_TotalPoints < 20
AND
CharacterGetDisplayName(_Character, _, _Name)
AND
StringConcatenate(_Name, " (Elite)", _NewName)
THEN
CharacterSetCustomName(_Character, _NewName);
*/

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
GetVarInteger(_Character, "LLENEMY_ChallengePoints", _TotalPoints)
AND
_TotalPoints >= 20
THEN
SetIsBoss(_Character, 1);
//END_REGION

//REGION DEBUG
IF
TextEventSet("llenemy_rantest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLib_Random_CreateSeed();
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
LeaderLib_Random_QRY(_Modulo)
AND
DB_LeaderLib_Random(_Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Roll [",_RollAmount,"] = [",_Ran,"]");
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRan(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLog_Log("TRACE", "[LLENEMY:Debug:RandomTest] Rolling complete.");

IF
TextEventSet("llenemy_randefaulttest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomDefaultTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
Random(_Modulo, _Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Result [",_Ran,"] Roll Number [",_RollAmount,"]");
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LeaderLog_Log("TRACE", "[LLENEMY:Debug:RandomTest] Rolling complete.");
//END_REGION

//REGION ELITES
PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _BonusUpgrades)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Character, _Group, _Type, _BonusUpgrades);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Character, _Group, _Type, _BonusUpgrades);

PROC
LLENEMY_Upgrades_Internal_ApplyEliteBonuses((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 0
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:ApplyEliteBonuses] Adding elite bonus to [",_Name,"] - [",_Group,":",_Type,"] Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Character, _Group, _Type, _Status, _Duration, _CP);

PROC
LLENEMY_Upgrades_Internal_OnEliteBonusRolled((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 1
AND
IntegerSubtract(_Amount, 1, _NewAmount)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Character, _Group, _Type, _NewAmount);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Character, _Group, _Type, _NewAmount);

PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Character)
AND
CharacterGetDisplayName(_Character, _, _Name)
AND
DB_LLENEMY_Elites_GuaranteedUpgrades(_Level, _Character, _Status, _Duration)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Character, _Status)
THEN
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus(_Character, _Status, _Duration);

PROC
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus((CHARACTERGUID)_Character, (STRING)_Status, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _, _CP)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollingDone] Adding guaranteed elite bonus - [",_Group,":",_Type,"] Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Character, _Group, _Type, _Status, _Duration, _CP);

PROC
LLENEMY_Upgrades_Internal_ApplyGuaranteedEliteBonus((CHARACTERGUID)_Character, (STRING)_Status, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_Statuses(_, _, _Status, _, _, _, _)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Buffs:OnRollingDone] Adding non-registered, guaranteed elite bonus to Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Character, "", "", _Status, _Duration, 2);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_EnemyUpgradeOverhaul"
