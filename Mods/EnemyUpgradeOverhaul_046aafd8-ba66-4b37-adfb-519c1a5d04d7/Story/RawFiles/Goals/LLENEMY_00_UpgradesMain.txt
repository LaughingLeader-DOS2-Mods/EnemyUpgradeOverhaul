Version 1
SubGoalCombiner SGC_AND
INITSECTION
//LLENEMY_Upgrades_InitSettings();
KBSECTION

//REGION ELITE_REGISTERING
PROC
LLENEMY_Elites_AddElite((STRING)_Level, (CHARACTERGUID)_Character)
THEN
LLENEMY_Elites_AddElite(_Level, _Character, "Buffs", "Elite", 1);

PROC
LLENEMY_Elites_AddElite((STRING)_Level, (CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
THEN
LLENEMY_Elites_AddElite(_Level, _Character, _Group, _Type, 1);

PROC
LLENEMY_Elites_AddElite((STRING)_Level, (CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_BonusUpgrades)
AND
DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _LastBonusUpgrades)
THEN
NOT DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _LastBonusUpgrades);

PROC
LLENEMY_Elites_AddElite((STRING)_Level, (CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_BonusUpgrades)
THEN
DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _BonusUpgrades);

IF
GameStarted(_Level, _)
AND
IsGameLevel(_Level, 1)
AND
NOT DB_LLENEMY_Elites_InitializedElitesForLevel(_Level)
THEN
DB_LLENEMY_Elites_InitializedElitesForLevel(_Level);
LeaderLog_Log("DEBUG", "[LLENEMY:RegionStarted] Registering elites for level [",_Level,"]");
LLENEMY_Elites_InitLevel(_Level);

IF
GameStarted("_TMPL_Sandbox", 1)
AND
NOT DB_LLENEMY_Elites_InitializedElitesForLevel("_TMPL_Sandbox")
THEN
DB_LLENEMY_Elites_InitializedElitesForLevel("_TMPL_Sandbox");
LeaderLog_Log("DEBUG", "[LLENEMY:RegionStarted] Registering elites for level [_TMPL_Sandbox]");
LLENEMY_Elites_InitLevel("_TMPL_Sandbox");

//Debug
PROC
LLENEMY_Elites_InitLevel("_TMPL_Sandbox")
THEN
LLENEMY_Elites_AddElite("_TMPL_Sandbox", CHARACTERGUID_Sandbox_Bar_Lizard_efa66ecd-286f-44df-ba96-ee1231f8e9bb, "Buffs", "Aura");
LLENEMY_Elites_AddElite("_TMPL_Sandbox", CHARACTERGUID_Sandbox_Market_Ernest_Herringway_da8d55ba-0855-4147-b706-46bbc67ec8b6, "Bonus", "Infusion_Elite");
LLENEMY_Elites_AddElite("_TMPL_Sandbox", CHARACTERGUID_Sandbox_Madam_Aya_cb60983d-5000-4ab6-a5f2-7aeacc7d4276, "Talents", "Elite");
LLENEMY_Elites_AddElite("_TMPL_Sandbox", CHARACTERGUID_Dwarves_Male_Clothing_001_d8eee103-3af9-4627-8ea7-72e4e8df9aa5, "Bonus", "Infusion");

PROC
LLENEMY_Elites_InitLevel("FTJ_FortFoy")
THEN
//Migo
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_BeachGheist_47263b13-ace6-4950-99b6-4f2b6ae8cc6c);
// Silence
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_BruteAssassin_d2df547d-852e-4644-ac6c-db99dacc539b, "Bonus", "Infusion_Elite");
// Griff
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_RC_FTJ_GhettoBoss_84758f75-01a3-4cce-9922-f42ffc4afddd, "Bonus", "Infusion_Elite");

//Red Prince's Assassin
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_RPAssassin_8d73b9c9-0d7e-4e5c-8cfb-6a13121cd440, "Talents", "Elite");

//Septa the Super Elite ;)
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_BeachCrab_ba6d2b58-c978-4ce9-a99b-3aef542dd2e7, "Buffs", "Elite", 2);
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_BeachCrab_ba6d2b58-c978-4ce9-a99b-3aef542dd2e7, "Bonus", "Infusion_Elite");

//Soul Jar Skeletons
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_RC_FTJ_SoulJarTrapSkeleton_003_5ef951b7-a893-4b48-9ee2-7e5d754c6a83);
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_RC_FTJ_SoulJarTrapSkeleton_006_20d96b30-c279-4f94-8815-8114e48f261e);

//Arena of the One
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_Arena_Gladiator_001_51a8d141-c7df-4d56-8d28-ca403033ca16, "Buffs", "Aura");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_Arena_Gladiator_002_31fcfd4c-1417-4ac8-8817-1dfb8a5b8e7b, "Bonus", "Infusion_Elite");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_Arena_Gladiator_003_b81cb546-05b1-404c-ae00-d76a0702bb86, "Talents", "Elite");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_Arena_Gladiator_004_d2a430fc-8f01-4962-b455-93f883c287d0, "Bonus", "Infusion");

//Kniles
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_MagisterTorturer_1d1c0ba0-a91e-4927-af79-6d8d27e0646b, "Bonus", "Infusion_Elite");

//Courtroom Magister Priest Guy
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_HighPriest_2a09f30c-0a3b-495f-8386-5390a6c4c08d, "Buffs", "Aura");

LLENEMY_Elites_AddElite("FTJ_FortFoy", S_GLO_Alexandar_03e6345f-1bd3-403c-80e2-a443a74f6349, "Buffs", "Aura");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_GLO_Alexandar_03e6345f-1bd3-403c-80e2-a443a74f6349, "Buffs", "Immunity");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_GLO_Dallis_69b951dc-55a4-44b8-a2d5-5efedbd7d572, "Talents", "Elite");

//Radeka
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_SW_Witch_4014aee0-56f1-47e0-a8eb-89c4b5a1da83, "Talents", "Elite");

//Trompdoy
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_SW_IllusionistFinal_1a3b44d4-0ba4-4289-b158-a54111b83e1d, "Bonus", "Infusion_Elite");

//Slane
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_SW_PurgedDragon_c099caa6-1938-4b4f-9365-d0881c611e71, "Buffs", "Immunity");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_SW_PurgedDragon_c099caa6-1938-4b4f-9365-d0881c611e71, "Bonus", "Infusion_Elite");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_SW_PurgedDragon_c099caa6-1938-4b4f-9365-d0881c611e71, "Bonus", "Special");

//Worm
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_FinalBattle_Voidwoken_7dcf3cc2-d015-4aff-9949-71fc539fcc73, "Buffs", "Immunity");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_FinalBattle_Voidwoken_7dcf3cc2-d015-4aff-9949-71fc539fcc73, "Bonus", "Infusion_Elite");
LLENEMY_Elites_AddElite("FTJ_FortFoy", S_FTJ_FinalBattle_Voidwoken_7dcf3cc2-d015-4aff-9949-71fc539fcc73, "Bonus", "Special");

IF
RegionEnded(_Level)
AND
DB_LLENEMY_Elites_InitializedElitesForLevel(_Level)
AND
DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _BonusUpgrades)
THEN
NOT DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _BonusUpgrades);

IF
RegionEnded(_Level)
AND
DB_LLENEMY_Elites_InitializedElitesForLevel(_Level)
THEN
NOT DB_LLENEMY_Elites_InitializedElitesForLevel(_Level);
LeaderLog_Log("DEBUG", "[LLENEMY:RegionEnded] Cleared elites for level [",_Level,"]");
//END_REGION

//REGION REGISTERING
PROC
LLENEMY_Upgrades_AddGroup((STRING)_Group, (STRING)_GlobalDisableFlag, (STRING)_RolledForFlag, (STRING)_GroupSuccessFlag)
THEN
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_AddType((STRING)_Group, (STRING)_Type, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
THEN
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _ChallengePoints);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatus(_Group, _Type, _Status, _Range, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _,_)
THEN
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, 1, 1);

PROC
LLENEMY_Upgrades_AddStatus((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_Range, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt)
AND
IntegerSum(_StartInt, _Range, _EndInt)
AND
IntegerSum(_EndInt, 1, _NextStartInt)
THEN
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt);
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _NextStartInt, _EndInt);
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _StartInt, _EndInt, _Duration, _ChallengePoints);

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints)
THEN
LLENEMY_Upgrades_AddStatusToRange(_Group, _Type, _Status, _MinRoll, _MaxRoll, _ChallengePoints, -1.0);

PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
THEN
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _ChallengePoints);

//Hopefully this should never actually be needed, as it could create gaps of "nothing" if the LastInt is upped without anything between the two values
PROC
LLENEMY_Upgrades_AddStatusToRange((STRING)_Group, (STRING)_Type, (STRING)_Status, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (INTEGER)_ChallengePoints, (REAL)_Duration)
AND
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt)
AND
_MaxRoll > _LastInt
THEN
NOT DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _LastInt);
DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _StartInt, _MaxRoll);
//END_REGION

//REGION RESET_DATA
PROC
LLENEMY_Upgrades_ResetUpgradeData()
THEN
SysClear("DB_LLENEMY_Upgrades_Groups", 4);
SysClear("DB_LLENEMY_Upgrades_Types", 5);
SysClear("DB_LLENEMY_Upgrades_Statuses", 7);
SysClear("DB_LLENEMY_Upgrades_LastTypeValues", 4);
SysClear("DB_LLENEMY_LastGrenadeInt", 2);
SysClear("DB_LLENEMY_GrenadeSkills", 3);

LLENEMY_Buffs_InitSettings();
LLENEMY_Talents_InitSettings();
LLENEMY_Stats_InitSettings();
//END_REGION

//REGION UPDATES
PROC
LeaderUpdater_ModUpdated("EnemyUpgradeOverhaul", "LaughingLeader", (STRING)_OldVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_OldVersion, 1, 1, 1, 2)
THEN
LLENEMY_Upgrades_ResetUpgradeData();
LeaderLog_Log("DEBUG", "[LLENEMY:UpgradesMain:LeaderUpdater_ModUpdated] Updating upgrade settings from version [",_OldVersion,"].");
LLENEMY_Debug_RemovePermanentStatus("EVASION_AURA");
LLENEMY_Debug_RemovePermanentStatus("EVASION");

PROC
LLENEMY_Debug_RemovePermanentStatus((STRING)_Status)
AND
DB_CombatCharacters(_Enemy, _)
AND
LeaderLib_Helper_QRY_HasPermanentStatus(_Enemy, _Status)
THEN
RemoveStatus(_Enemy, _Status);
//END_REGION

//REGION APPLYING
PROC
LLENEMY_Upgrades_ClearFlags((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
ObjectGetFlag(_Character, _RolledForFlag, 1)
THEN
ObjectClearFlag(_Character, _RolledForFlag);

PROC
LLENEMY_Upgrades_RollForUpgrades((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisableFlag, _RolledForFlag, _GroupSuccessFlag)
AND
NOT DB_GlobalFlag(_GlobalDisableFlag)
AND
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag(_Character, _RolledForFlag)
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
THEN
NOT DB_LeaderLib_Random(_Roll);
LLENEMY_Upgrades_OnRollForGroup(_Character, _Roll, _Group, _GroupSuccessFlag);

QRY
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag((CHARACTERGUID)_Character, (STRING)_Flag)
AND
_Flag == ""
THEN
DB_NOOP(1);

QRY
LLENEMY_Upgrades_Internal_QRY_SetRolledFlag((CHARACTERGUID)_Character, (STRING)_Flag)
AND
_Flag != ""
AND
ObjectGetFlag(_Character, _Flag, 0)
THEN
ObjectSetFlag(_Character, _Flag);

PROC
LLENEMY_Upgrades_ResetRolledFlags((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Upgrades_Groups(_Group, _GlobalDisabledFlag, _RolledForFlag, _GroupSuccessFlag)
THEN
ObjectClearFlag(_Character, _RolledForFlag);

PROC
LLENEMY_Upgrades_OnRollForGroup((CHARACTERGUID)_Character, (INTEGER)_Roll, (STRING)_Group, (STRING)_GroupSuccessFlag)
AND
DB_LLENEMY_Upgrades_Types(_Group, _Type, _MinRoll, _MaxRoll, _CP)
//AND
//LLENEMY_Upgrades_QRY_Internal_LogGroupRoll(_Character, _Roll, _MinRoll, _MaxRoll, _Group, _Type)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
THEN
LLENEMY_Upgrades_CanRollForStatusUpgrade(_Character, _Group, _Type);
LLENEMY_Upgrades_RollForStatusUpgrade(_Character, _Group, _Type, _GroupSuccessFlag);
LLENEMY_Upgrades_CleanupBlockUpgrades(_Character, _Group, _Type);

QRY
LLENEMY_Upgrades_QRY_Internal_LogGroupRoll((CHARACTERGUID)_Character, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type)
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLENEMY:Upgrades:LogGroupRoll] [",_Name,"] Roll [", _RollStr, "] Group [",_Group,"] Type [",_Type,"] Min[",_MinStr,"] Max[",_MaxStr,"]");

PROC
LLENEMY_Upgrades_OnRollForGroup((CHARACTERGUID)_Character, (INTEGER)_Roll, (STRING)_Group, (STRING)_GroupSuccessFlag)
AND
_Roll == 0
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLENEMY:Buffs:OnRollForGroup] [",_Name,"] Rolled a 0 for group [",_Group,"]! Critical failure!");
LLENEMY_Upgrades_OnGroupCriticalFailure(_Character, _Group);

PROC
LLENEMY_Upgrades_OnGroupCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group)
THEN
DB_NOOP(1);

//Intercept and add to DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type) to block a specific group from applying regularly
PROC
LLENEMY_Upgrades_CanRollForStatusUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_RollForStatusUpgrade((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_GroupSuccessFlag)
AND
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type)
//AND
//DB_LLENEMY_Upgrades_LastTypeValues(_Group, _Type, _, _EndInt) // 999 is now the max for everything
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
//AND
//LLENEMY_Upgrades_QRY_Internal_LogTypeRoll(_Character, _Roll, _MinRoll, _MaxRoll, _Group, _Type)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("DEBUG", "[LLENEMY:Buffs:RollForStatusUpgrade] [",_Name,"] Roll successful for [",_Group,":",_Type,"] Status [",_Status,"]. Applying.");
LLENEMY_Upgrades_ApplyUpgrade(_Character, _Status, _Duration, _CP);
LLENEMY_Upgrades_OnRollForGroupSucceeded(_Character, _Group, _Type, _GroupSuccessFlag);

QRY
LLENEMY_Upgrades_QRY_Internal_LogTypeRoll((CHARACTERGUID)_Character, (INTEGER)_Roll, (INTEGER)_MinRoll, (INTEGER)_MaxRoll, (STRING)_Group, (STRING)_Type)
AND
IntegertoString(_Roll, _RollStr)
AND
IntegertoString(_MinRoll, _MinStr)
AND
IntegertoString(_MaxRoll, _MaxStr)
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLENEMY:Upgrades:LogTypeRoll] [",_Name,"] Roll [", _RollStr, "] Group [",_Group,"] Type [",_Type,"] Min[",_MinStr,"] Max[",_MaxStr,"]");

QRY
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
THEN
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll);

PROC
LLENEMY_Upgrades_Internal_CheckForTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Roll)
AND
_Roll == 0
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLENEMY:Buffs:CheckForTypeCriticalFailure] [",_Name,"] Rolled a 0 for Group [",_Group,"] and Type [",_Type,"]! Critical failure!");
LLENEMY_Upgrades_OnTypeCriticalFailure(_Character, _Group, _Type);

PROC
LLENEMY_Upgrades_OnTypeCriticalFailure((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LLENEMY_Upgrades_OnRollForGroupSucceeded((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (STRING)_GroupSuccessFlag)
AND
_GroupSuccessFlag != ""
THEN
ObjectSetFlag(_Character, _GroupSuccessFlag);

PROC
LLENEMY_Upgrades_CleanupBlockUpgrades((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type)
AND
DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type)
THEN
NOT DB_LLENEMY_StatusUpgradeBlocked(_Character, _Group, _Type);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
NOT GetVarInteger(_Character, "LLENEMY_ChallengePoints", _)
THEN
SetVarInteger(_Character, "LLENEMY_ChallengePoints", 0);

PROC
LLENEMY_Upgrades_ApplyUpgrade((CHARACTERGUID)_Character, (STRING)_Status, (REAL)_Duration, (INTEGER)_CP)
AND
GetVarInteger(_Character, "LLENEMY_ChallengePoints", _TotalPoints)
AND
IntegerSum(_CP, _TotalPoints, _NextTotal)
THEN
SetVarInteger(_Character, "LLENEMY_ChallengePoints", _NextTotal);
ApplyStatus(_Character, _Status, _Duration, 0, _Character);
//END_REGION

//REGION DEBUG
IF
TextEventSet("llenemy_rantest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLib_Random_CreateSeed();
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
LeaderLib_Random_QRY(_Modulo)
AND
DB_LeaderLib_Random(_Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Roll [",_RollAmount,"] = [",_Ran,"]");
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRan(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandom();

PROC
LLENEMY_Debug_TestRandom()
AND
DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRan(_Modulo, _RollAmount);
LeaderLog_Log("DEBUG", "[LLENEMY:Debug:RandomTest] Rolling complete.");

IF
TextEventSet("llenemy_randefaulttest")
AND
GetTextEventParamInteger(1, _Modulo)
AND
GetTextEventParamInteger(2, _RollAmount)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomDefaultTest] Rolling [",_RollAmount,"] times with modulo [",_Modulo,"].");
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount > 0
AND
IntegerSubtract(_RollAmount, 1, _NextAmount)
AND
Random(_Modulo, _Ran)
THEN
LeaderLog_LogInt("DEBUG", "[LLENEMY:Debug:RandomTest] Result [",_Ran,"] Roll Number [",_RollAmount,"]");
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _NextAmount);
LLENEMY_Debug_TestRandomDefault();

PROC
LLENEMY_Debug_TestRandomDefault()
AND
DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount)
AND
_RollAmount <= 0
THEN
NOT DB_LLENEMY_Debug_TestRanDefault(_Modulo, _RollAmount);
LeaderLog_Log("DEBUG", "[LLENEMY:Debug:RandomTest] Rolling complete.");
//END_REGION

//REGION ELITES
PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Character)
AND
DB_LLENEMY_Elites(_Level, _Character, _Group, _Type, _BonusUpgrades)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Character, _Group, _Type, _BonusUpgrades);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Character, _Group, _Type, _BonusUpgrades);

PROC
LLENEMY_Upgrades_Internal_ApplyEliteBonuses((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 0
AND
LeaderLib_Random_QRY(999)
AND
DB_LeaderLib_Random(_Roll)
AND
LLENEMY_Upgrades_QRY_Internal_CheckForTypeCriticalFailure(_Character, _Group, _Type, _Roll)
AND
DB_LLENEMY_Upgrades_Statuses(_Group, _Type, _Status, _MinRoll, _MaxRoll, _Duration, _CP)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
CharacterGetDisplayName(_Character, _, _Name)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("DEBUG", "[LLENEMY:Buffs:ApplyEliteBonuses] Adding elite bonus to [",_Name,"] - [",_Group,":",_Type,"] Status [",_Status,"].");
LLENEMY_Upgrades_ApplyUpgrade(_Character, _Status, _Duration, _CP);

PROC
LLENEMY_Upgrades_Internal_OnEliteBonusRolled((CHARACTERGUID)_Character, (STRING)_Group, (STRING)_Type, (INTEGER)_Amount)
AND
_Amount > 1
AND
IntegerSubtract(_Amount, 1, _NewAmount)
THEN
LLENEMY_Upgrades_Internal_ApplyEliteBonuses(_Character, _Group, _Type, _NewAmount);
LLENEMY_Upgrades_Internal_OnEliteBonusRolled(_Character, _Group, _Type, _NewAmount);
//END_REGION


EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_EnemyUpgradeOverhaul"
