Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLENEMY_Rewards_InitSettings();
KBSECTION
//REGION SETTINGS
PROC
LLENEMY_Rewards_InitSettings()
THEN
LLENEMY_Rewards_AddTreasurePool("LLENEMY.Rewards.Easy", 1, 10);
LLENEMY_Rewards_AddTreasurePool("LLENEMY.Rewards.Medium", 11, 16);
LLENEMY_Rewards_AddTreasurePool("LLENEMY.Rewards.Hard", 17, 25);
LLENEMY_Rewards_AddTreasurePool("LLENEMY.Rewards.Insane", 26, 99);
LLENEMY_Rewards_AddTreasurePool("LLENEMY.Rewards.Impossible", 100, 999);

LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Easy", "RewardTiny", 50);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Easy", "Luck1", 10);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Easy", "RewardCombat", 4);

LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Medium", "RewardSmall", 50);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Medium", "Luck2", 10);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Medium", "RewardCombat", 1);

LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Hard", "RewardMedium", 50);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Hard", "Luck3", 10);

LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Insane", "RewardBig", 50);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Insane", "Luck4", 10);

LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Impossible", "RewardBig", 50);
LLENEMY_Rewards_AddTreasure("LLENEMY.Rewards.Impossible", "LuckTop", 35);

LLENEMY_Rewards_AddTreasureEffect("Luck1", "LLENEMY_FX_Rewards_Lucky_01");
LLENEMY_Rewards_AddTreasureEffect("Luck2", "LLENEMY_FX_Rewards_Lucky_02");
LLENEMY_Rewards_AddTreasureEffect("Luck3", "LLENEMY_FX_Rewards_Lucky_03");
LLENEMY_Rewards_AddTreasureEffect("Luck4", "LLENEMY_FX_Rewards_Lucky_04");
LLENEMY_Rewards_AddTreasureEffect("LuckTop", "LLENEMY_FX_Rewards_Lucky_05");

//Default if nothing else plays
LLENEMY_Rewards_AddRewardEffect("LLENEMY_FX_Rewards_Generic_Weak_01", 1, 16);
LLENEMY_Rewards_AddRewardEffect("LLENEMY_FX_Rewards_Generic_Strong_01", 17, 999);

PROC
LLENEMY_Rewards_AddTreasurePool((STRING)_Name, (INTEGER)_MinAmount, (INTEGER)_MaxAmount)
THEN
DB_LLENEMY_Rewards_TreasurePool(_Name, _MinAmount, _MaxAmount);

PROC
LLENEMY_Rewards_AddTreasure((STRING)_Pool, (STRING)_Treasure, (INTEGER)_Range)
AND
NOT DB_LLENEMY_Rewards_PoolVariables(_Pool, _,_)
THEN
DB_LLENEMY_Rewards_PoolVariables(_Pool, 1, 1);

PROC
LLENEMY_Rewards_AddTreasure((STRING)_Pool, (STRING)_Treasure, (INTEGER)_Range)
AND
DB_LLENEMY_Rewards_PoolVariables(_Pool, _StartInt, _LastInt)
AND
IntegerSum(_StartInt, _Range, _EndInt)
AND
IntegerSum(_EndInt, 1, _NextStartInt)
THEN
NOT DB_LLENEMY_Rewards_PoolVariables(_Pool, _StartInt, _LastInt);
DB_LLENEMY_Rewards_PoolVariables(_Pool, _NextStartInt, _EndInt);
DB_LLENEMY_Rewards_Treasure(_Pool, _Treasure, _StartInt, _EndInt);

PROC
LLENEMY_Rewards_AddRewardEffect((STRING)_Effect, (INTEGER)_MinCP, (INTEGER)_MaxCP)
THEN
DB_LLENEMY_Rewards_CPEffects(_Effect, _MinCP, _MaxCP);

PROC
LLENEMY_Rewards_AddTreasureEffect((STRING)_Treasure, (STRING)_Effect)
THEN
DB_LLENEMY_Rewards_TreasureEffects(_Treasure, _Effect);
//END_REGION

//REGION CRITICAL_FAILURE_BONUS
PROC
LLENEMY_Upgrades_OnCriticalFailure((CHARACTERGUID)_Char)
THEN
LLENEMY_Rewards_AddBonusTreasureStatus(_Char);

PROC
LLENEMY_Upgrades_OnTypeCriticalFailure((CHARACTERGUID)_Char, (STRING)_Group, (STRING)_Type)
AND
LLENEMY_Rewards_QRY_TotalBonusIsBelow(_Char, 3)
THEN
LLENEMY_Rewards_AddBonusTreasureStatus(_Char);

QRY
LLENEMY_Rewards_QRY_TotalBonusIsBelow((CHARACTERGUID)_Char, (INTEGER)_MaxBonus)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
_Current < _MaxBonus
THEN
DB_NOOP(1);

QRY
LLENEMY_Rewards_QRY_TotalBonusIsBelow((CHARACTERGUID)_Char, (INTEGER)_MaxBonus)
AND
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _)
THEN
DB_NOOP(1);

PROC
LLENEMY_Rewards_AddBonusTreasureStatus((CHARACTERGUID)_Char)
AND
LeaderLib_Random_QRY(2)
AND
DB_LeaderLib_Random(_BonusTurns)
AND
IntegerSum(_BonusTurns, 2, _AdjustedBonusTurns)
AND
Real(_AdjustedBonusTurns, _BonusTurnsR)
AND
RealProduct(_BonusTurnsR, 6.0, _Duration)
THEN
NOT DB_LeaderLib_Random(_BonusTurns);
LLENEMY_Rewards_Internal_IncrementBonusTreasure(_Char);
ApplyStatus(_Char, "LLENEMY_BONUS_TREASURE_ROLL", _Duration);

PROC
LLENEMY_Rewards_Internal_IncrementBonusTreasure((CHARACTERGUID)_Char)
AND
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _)
THEN
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, 0);

PROC
LLENEMY_Rewards_Internal_IncrementBonusTreasure((CHARACTERGUID)_Char)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
IntegerSum(_Current, 1, _Next)
THEN
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current);
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Next);

IF
CharacterStatusApplied(_Char, "LLENEMY_BONUS_TREASURE_ROLL", _Cause)
AND
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _)
AND
CharacterGetDisplayName(_Char, _, _Name)
AND
String(_Cause, _CauseStr)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterStatusApplied] [ERROR] [LLENEMY_BONUS_TREASURE_ROLL] was being applied to [",_Name,"] by [",_CauseStr,"] without any database entries!");
RemoveStatus(_Char, "LLENEMY_BONUS_TREASURE_ROLL");

IF
CharacterStatusRemoved(_Char, "LLENEMY_BONUS_TREASURE_ROLL", _)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
_Current > 0
AND
IntegerSubtract(_Current, 1, _Next)
THEN
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current);
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Next);

IF
CharacterStatusRemoved(_Char, "LLENEMY_BONUS_TREASURE_ROLL", _)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
_Current <= 0
THEN
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current);

IF
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Bonuses)
AND
NOT GetVarInteger(_Char, "LLENEMY_ChallengePoints", _)
THEN
SetVarInteger(_Char, "LLENEMY_ChallengePoints", 0);

//Real unlucky enemies == big time loot. Chance for legendaries
IF
CharacterPrecogDying(_Char)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Bonuses)
AND
_Bonuses >= 2
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", 0)
AND
LeaderLib_Random_QRY(1,999)
AND
DB_LeaderLib_Random(_CP)
THEN
NOT DB_LeaderLib_Random(_CP);
SetVarInteger(_Char, "LLENEMY_ChallengePoints", _CP);
//END_REGION

//REGION TREASURE_GENERATION
IF
CharacterPrecogDying(_Char)
AND
NOT DB_GlobalFlag("LLENEMY_RewardsDisabled")
AND
CharacterIsPlayer(_Char, 0)
AND
CharacterIsSummon(_Char, 0)
AND
HasActiveStatus(_Char, "LLENEMY_DUPLICANT", 0)
THEN
LLENEMY_Rewards_SetupTreasure(_Char);
LLENEMY_Rewards_SetupBonusTreasure(_Char);

PROC
LLENEMY_Rewards_SetupTreasure((CHARACTERGUID)_Char)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _CP)
AND
_CP > 0
AND
DB_LLENEMY_Rewards_TreasurePool(_Pool, _MinAmount, _MaxAmount)
AND
_CP <= _MaxAmount
AND
_CP >= _MinAmount
AND
DB_LLENEMY_Rewards_PoolVariables(_Pool, _StartInt, _EndInt)
AND
LeaderLib_Random_QRY(_EndInt)
AND
DB_LeaderLib_Random(_Roll)
AND
DB_LLENEMY_Rewards_Treasure(_Pool, _Treasure, _MinRoll, _MaxRoll)
AND
_Roll <= _MaxRoll
AND
_Roll >= _MinRoll
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
NOT DB_LeaderLib_Random(_Roll);
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterPrecogDying] [",_Name,"] will generate treasure [",_Treasure,"] when dead.");
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure);
ObjectSetFlag(_Char, "LLENEMY_GenerateRewards");

PROC
LLENEMY_Rewards_SetupBonusTreasure((CHARACTERGUID)_Char)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
_Current > 0
AND
IntegerSubtract(_Current, 1, _Next)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current);
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Next);
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterPrecogDying] Adding bonus treasure to [",_Name,"].");
LLENEMY_Rewards_SetupTreasure(_Char);
LLENEMY_Rewards_SetupBonusTreasure(_Char);

PROC
LLENEMY_Rewards_SetupTreasure((CHARACTERGUID)_Char)
AND
DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current)
AND
_Current <= 0
THEN
NOT DB_LLENEMY_Rewards_Temp_BonusTreasure(_Char, _Current);

IF
CharacterPrecogDying(_Char)
AND
ObjectGetFlag(_Char, "LLENEMY_GenerateRewards", 1)
AND
GetPosition(_Char, _x, _y, _z)
AND
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterPrecogDying] [",_Name,"] generated treasure [",_Treasure,"].");
CharacterGiveReward(_Char, _Treasure, 0);

/*
IF
CharacterPrecogDying(_Char)
AND
ObjectGetFlag(_Char, "LLENEMY_GenerateRewards", 1)
AND
GetPosition(_Char, _x, _y, _z)
AND
CharacterGetLevel(_Char, _Level)
AND
CreateItemTemplateAtPosition("LOOT_LeaderLib_BackPack_Invisible_98fa7688-0810-4113-ba94-9a8c8463f830", _X, _y, _z, _Backpack)
AND
LLENEMY_Rewards_QRY_Internal_StoreBackpack(_Char, _Backpack)
AND
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterPrecogDying] [",_Name,"] generated treasure [",_Treasure,"].");
GenerateTreasure(_Backpack, _Treasure, _Level, _Char);
MoveAllItemsTo(_Backpack, _Char);

QRY
LLENEMY_Rewards_QRY_Internal_StoreBackpack((CHARACTERGUID)_Char, (ITEMGUID)_Backpack)
THEN
DB_LLENEMY_Rewards_Temp_Backpacks(_Char, _Backpack);
//PlaySound(_Char, "SE_FX_GP_ScriptedEvent_Fane_Romance_BuildUp");

IF
CharacterPrecogDying(_Char)
AND
DB_LLENEMY_Rewards_Temp_Backpacks(_Char, _Backpack)
THEN
NOT DB_LLENEMY_Rewards_Temp_Backpacks(_Char, _Backpack);
ItemRemove(_Backpack);
*/
//END_REGION

//REGION EFFECTS
IF
CharacterDied(_Char)
AND
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure)
THEN
LLENEMY_Rewards_OnCharacterDied(_Char, _Treasure);

PROC
LLENEMY_Rewards_OnCharacterDied((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
GetPosition(_Char, _x, _y, _z)
AND
DB_LLENEMY_Rewards_TreasureEffects(_Treasure, _Effect)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterDied] [",_Name,"] Played treasure effect [",_Effect,"] for treasure [",_Treasure,"].");
PlayEffectAtPosition(_Effect, _x, _y, _z);
DB_LLENEMY_Rewards_Temp_PlayedEffect(_Char);
//PlaySound(_Char, "UI_Game_PerceptionReveal_Puzzle");

PROC
LLENEMY_Rewards_OnCharacterDied((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure)
THEN
NOT DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Char, _Treasure);

PROC
LLENEMY_Rewards_OnCharacterDied((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
NOT DB_LLENEMY_Rewards_Temp_PlayedEffect(_Char)
AND
ObjectGetFlag(_Char, "LLENEMY_GenerateRewards", 1)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _CP)
AND
_CP > 0
AND
GetPosition(_Char, _x, _y, _z)
AND
DB_LLENEMY_Rewards_CPEffects(_Effect, _MinCP, _MaxCP)
AND
_CP <= _MaxCP
AND
_CP >= _MinCP
AND
CharacterGetDisplayName(_Char, _, _Name)
AND
IntegertoString(_CP, _CpStr)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:CharacterDied] [",_Name,"] Played treasure effect [",_Effect,"] for Challenge Points value [",_CpStr,"].");
PlayEffectAtPosition(_Effect, _x, _y, _z);
//PlaySound(_Char, "UI_Game_PerceptionReveal_Puzzle");

PROC
LLENEMY_Rewards_OnCharacterDied((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
DB_LLENEMY_Rewards_Temp_PlayedEffect(_Char)
THEN
NOT DB_LLENEMY_Rewards_Temp_PlayedEffect(_Char);

PROC
LLENEMY_Rewards_OnCharacterDied((CHARACTERGUID)_Char, (STRING)_Treasure)
AND
ObjectGetFlag(_Char, "LLENEMY_GenerateRewards", 1)
THEN
ObjectClearFlag(_Char, "LLENEMY_GenerateRewards");
//END_REGION

//REGION DUPLICANT_TREASURE
IF
StoryEvent((CHARACTERGUID)_Dupe, "LLENEMY_Dupe_DupeDied")
AND
NOT DB_GlobalFlag("LLENEMY_RewardsDisabled")
THEN
LLENEMY_Rewards_SetupTreasure(_Dupe);
LLENEMY_Rewards_SetupBonusTreasure(_Dupe);

IF
StoryEvent((CHARACTERGUID)_Dupe, "LLENEMY_Dupe_DupeDied")
AND
ObjectGetFlag(_Dupe, "LLENEMY_GenerateRewards", 1)
AND
GetPosition(_Dupe, _x, _y, _z)
AND
CharacterGetLevel(_Dupe, _Level)
AND
CreateItemTemplateAtPosition("CONT_LLENEMY_DuplicantTreasure_b6773d33-18e4-4fa3-abe0-85d33c30df0a", _X, _y, _z, _Container)
AND
DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Dupe, _Treasure)
AND
CharacterGetDisplayName(_Dupe, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:LLENEMY_Dupe_DupeDied] [",_Name,"] generated treasure [",_Treasure,"].");
GenerateTreasure(_Container, _Treasure, _Level, _Dupe);
NOT DB_LLENEMY_Rewards_Temp_TreasureToGenerate(_Dupe, _Treasure);
LLENEMY_Rewards_OnCharacterDied(_Dupe, _Treasure);

IF
StoryEvent((ITEMGUID)_Item, "LLENEMY_Container_OnClosed_CheckDestroy")
AND
ItemIsDestroyed(_Item, 0)
AND
ContainerGetGoldValue(_Item, _Value)
AND
_Value == 0
THEN
ItemDestroy(_Item);
//END_REGION

//REGION DEBUG
PROC
LLENEMY_Upgrades_OnRollingDone((CHARACTERGUID)_Char)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _ChallengePoints)
AND
_ChallengePoints > 0
AND
IntegertoString(_ChallengePoints, _PointsStr)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Upgrades:OnRollingDone] Enemy [",_Name,"] Challenge Points value is [",_PointsStr,"].");

IF
CharacterDied(_Char)
AND
GetVarInteger(_Char, "LLENEMY_ChallengePoints", _ChallengePoints)
AND
_ChallengePoints > 0
AND
IntegertoString(_ChallengePoints, _PointsStr)
AND
CharacterGetDisplayName(_Char, _, _Name)
THEN
LeaderLog_Log("TRACE", "[LLENEMY:Rewards:Debug] Enemy [",_Name,"] died. Challenge Points [",_PointsStr,"].");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_EnemyUpgradeOverhaul"
